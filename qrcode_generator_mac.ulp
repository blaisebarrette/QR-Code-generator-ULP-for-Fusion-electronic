// QR Code Generator for Eagle/Fusion Electronics
// This ULP generates QR codes directly on PCB layers
// Version 1.0.1-dev

#usage "<b>QR Code Generator for MacOS</b>\n"
       "<p>"
       "Generate QR codes directly on PCB layers with customizable size and position.<br>"
       "This ULP allows you to create QR codes that can be placed on any PCB layer "
       "in your Fusion Electronics design."
       "</p>"
       "<p>"
       "<b>Usage:</b><br>"
       "Run the ULP and specify URL, layer, and size. The QR code will be generated "
       "and placed at the specified coordinates."
       "</p>"
       "<p>"
       "<b>Note:</b> This version is for MacOS only.<br>"
       "For Windows version, visit: "
       "<a href='https://github.com/blaisebarrette/QRCode-ULP-for-Fusion-electronics'>GitHub Repository</a>"
       "</p>"
       "<author>Author: <b>Blaise Barrette</b></author>"

#require 4.11

// Global variables
string VERSION = "1.0.1-dev";
int PosX, PosY;

// Function to calculate default position based on size
void updateDefaultPosition(int size) {
    PosX = -(size + 1000);
    PosY = -(size + 1000);
}

// Function to get API URL for current version
string getApiUrl() {
    string csvFile = filedir(argv[0]) + "TempCSVFile.csv";
    string curlCmd = "curl -m 10 -s -w \"%{http_code}\" \"https://raw.githubusercontent.com/blaisebarrette/QRCode-ULP-for-Fusion-electronics/V1.0.1-dev/versions.csv\" > \"" + csvFile + "\"";
    
    string result;
    int exitCode = system(curlCmd);
    
    if (exitCode != 0) {
        dlgMessageBox("Network Error:\n\n" +
                     "Failed to fetch version information\n\n" +
                     "Debug Info:\n" +
                     "- Exit Code: " + exitCode + "\n" +
                     "- Command: " + curlCmd + "\n" +
                     "- ULP Version: " + VERSION + "\n\n" +
                     "Please check your internet connection.",
                     "OK");
        return "";
    }
    
    // Lire le fichier CSV dans un tableau
    string csvLines[];
    int nLines = fileread(csvLines, csvFile);
    
    if (nLines <= 1) {  // Le fichier doit avoir au moins 2 lignes (en-tête + données)
        system("rm \"" + csvFile + "\"");
        return "";
    }
    
    // Parcourir les lignes (en sautant l'en-tête)
    for (int i = 1; i < nLines; i++) {
        string fields[];
        int n = strsplit(fields, csvLines[i], ',');
        if (n >= 4 && fields[0] == VERSION) {
            // Check if version is supported
            if (n >= 5 && fields[4] == "0") {
                dlgMessageBox("Error: This version of the ULP is no longer supported.\n\n" +
                            "Debug Info:\n" +
                            "- ULP Version: " + VERSION + "\n" +
                            "- CSV Line: " + csvLines[i] + "\n\n" +
                            "Please download the latest version to continue:\n" +
                            "https://github.com/blaisebarrette/QRCode-ULP-for-Fusion-electronics/releases/latest",
                            "OK");
                exit(1);
            }
            system("rm \"" + csvFile + "\"");
            return fields[3];  // api_url is the 4th field
        }
    }
    
    system("rm \"" + csvFile + "\"");
    return "";
}

void main(void) {
    // Initialize variables
    string Url = "";
    int Size = 500;
    
    // Layer selection (simplified to most commonly used layers)
    string LayerNames[] = {
        "Top Silkscreen (tPlace)",
        "Bottom Silkscreen (bPlace)",
        "Top Documentation (tDocu)",
        "Bottom Documentation (bDocu)"
    };
    int LayerNumbers[] = {21, 22, 51, 52};
    int SelectedLayer = 0;
    
    // Initialize default positions
    updateDefaultPosition(Size);
    
    // Dialog for input
    if (!dlgDialog("QR Code Generator") {
        dlgHBoxLayout {
            dlgVBoxLayout {
                dlgGroup("QR Code Settings") {
                    dlgLabel("Enter the URL for your QR code:");
                    dlgStringEdit(Url);
                    dlgSpacing(10);
                    dlgLabel("Enter size in mils (250-5000):");
                    dlgHBoxLayout {
                        dlgSpinBox(Size, 250, 5000);
                        dlgPushButton("Update Position") {
                            updateDefaultPosition(Size);
                            dlgRedisplay();
                        }
                    }
                    dlgSpacing(10);
                    dlgLabel("Select layer:");
                    dlgComboBox(LayerNames, SelectedLayer);
                    dlgSpacing(10);
                    dlgGroup("Position (mils)") {
                        dlgHBoxLayout {
                            dlgLabel("X:");
                            dlgSpinBox(PosX, -50000, 50000);
                            dlgLabel("Y:");
                            dlgSpinBox(PosY, -50000, 50000);
                        }
                    }
                }
                dlgSpacing(10);
                dlgHBoxLayout {
                    dlgStretch(1);
                    dlgPushButton("+OK") dlgAccept();
                    dlgPushButton("-Cancel") dlgReject();
                    dlgStretch(1);
                }
            }
        }
    } || Url == "") {
        dlgMessageBox("No URL provided. Operation cancelled.");
        exit(0);
    }
    
    // Prepare and clean up file paths
    string tmpFile = filedir(argv[0]) + "qr_temp.txt";
    string scriptFile = filedir(argv[0]) + "qr_script.scr";
    
    // Clean up existing files
    if (filesize(tmpFile) >= 0) {
        system("rm \"" + tmpFile + "\"");
    }
    if (filesize(scriptFile) >= 0) {
        system("rm \"" + scriptFile + "\"");
    }
    
    // Get API URL from versions.csv
    string pythonScriptUrl = getApiUrl();
    if (pythonScriptUrl == "") {
        dlgMessageBox("Error: Could not get API URL.\n" +
                     "Using default URL.",
                     "OK");
        pythonScriptUrl = "https://blaisebarrette.pythonanywhere.com/generate-qr";
    }
    
    // Generate QR code using the retrieved URL
    string curlCmd;
    sprintf(curlCmd, "curl -m 10 -s \"%s?url=%s&size=%d\" > \"%s\"", pythonScriptUrl, Url, Size, tmpFile);
    if (system(curlCmd) != 0) {
        dlgMessageBox("Error: QR Code generation failed\n\n" +
                     "Debug Info:\n" +
                     "- API URL: " + pythonScriptUrl + "\n" +
                     "- Command: " + curlCmd + "\n" +
                     "Please check your internet connection or try again later.",
                     "OK");
        exit(1);
    }
    
    // Verify QR code response
    if (filesize(tmpFile) <= 0) {
        dlgMessageBox("Error: Empty response from QR Code service\n\n" +
                     "Debug Info:\n" +
                     "- API URL: " + pythonScriptUrl + "\n" +
                     "Please try again later.",
                     "OK");
        exit(1);
    }
    
    // Check response content
    string firstLine;
    if (fileread(firstLine, tmpFile) > 0) {
        if (strstr(firstLine, "Error") >= 0 || strstr(firstLine, "<!DOCTYPE") >= 0) {
            dlgMessageBox("Error: Invalid response from QR Code service\n\n" +
                         "Debug Info:\n" +
                         "- Response: " + firstLine + "\n" +
                         "- API URL: " + pythonScriptUrl + "\n" +
                         "Please try again later.",
                         "OK");
            system("rm \"" + tmpFile + "\"");
            exit(1);
        }
    }
    
    // Read full QR code data
    string lines[];
    int nLines = fileread(lines, tmpFile);
    
    if (nLines <= 0) {
        dlgMessageBox("Error: Could not read QR code data.");
        system("rm \"" + tmpFile + "\"");
        exit(1);
    }
    
    // Generate Eagle script
    output(scriptFile, "wt") {
        printf("GRID MIL;\n");
        printf("CHANGE LAYER %d;\n", LayerNumbers[SelectedLayer]);
        printf("SET WIRE_BEND 2;\n");
        
        // Create rectangles for QR code
        int moduleSize = Size / 21;
        // Check if bottom layer is selected (22 or 52)
        int isBottomLayer = (LayerNumbers[SelectedLayer] == 22 || LayerNumbers[SelectedLayer] == 52);
        
        for (int row = 0; row < nLines; row++) {
            string line = lines[row];
            for (int col = 0; col < strlen(line); col++) {
                if (line[col] == '1') {
                    int x1 = PosX + col * moduleSize - (Size/2);
                    int y1 = PosY + row * moduleSize - (Size/2);
                    int x2 = PosX + (col + 1) * moduleSize - (Size/2);
                    int y2 = PosY + (row + 1) * moduleSize - (Size/2);
                    
                    // Mirror X coordinates if bottom layer
                    if (isBottomLayer) {
                        int temp_x1 = x1;
                        x1 = -x2;
                        x2 = -temp_x1;
                    }
                    
                    printf("RECT (%d %d) (%d %d);\n", x1, y1, x2, y2);
                }
            }
        }
    }
    
    // Clean up and execute
    system("rm \"" + tmpFile + "\"");
    exit("SCRIPT '" + scriptFile + "'");
} 